upName	lambdalifting.html#upName	lambdalifting: upName	
paramName	lambdalifting.html#paramName	lambdalifting: paramName	
envName	lambdalifting.html#envName	lambdalifting: envName	
createClosureIterStateType	lambdalifting.html#createClosureIterStateType,ModuleGraph,PSym	lambdalifting: createClosureIterStateType(g: ModuleGraph; iter: PSym): PType	
getClosureIterResult	lambdalifting.html#getClosureIterResult,ModuleGraph,PSym	lambdalifting: getClosureIterResult(g: ModuleGraph; iter: PSym): PSym	
getEnvParam	lambdalifting.html#getEnvParam,PSym	lambdalifting: getEnvParam(routine: PSym): PSym	
makeClosure	lambdalifting.html#makeClosure,ModuleGraph,PSym,PNode,TLineInfo	lambdalifting: makeClosure(g: ModuleGraph; prc: PSym; env: PNode; info: TLineInfo): PNode	
isIterator	lambdalifting.html#isIterator.t,PSym	lambdalifting: isIterator(owner: PSym): bool	
liftIterSym	lambdalifting.html#liftIterSym,ModuleGraph,PNode,PSym	lambdalifting: liftIterSym(g: ModuleGraph; n: PNode; owner: PSym): PNode	
freshVarForClosureIter	lambdalifting.html#freshVarForClosureIter,ModuleGraph,PSym,PSym	lambdalifting: freshVarForClosureIter(g: ModuleGraph; s, owner: PSym): PNode	
getStateField	lambdalifting.html#getStateField,ModuleGraph,PSym	lambdalifting: getStateField(g: ModuleGraph; owner: PSym): PSym	
semCaptureSym	lambdalifting.html#semCaptureSym,PSym,PSym	lambdalifting: semCaptureSym(s, owner: PSym)	
liftIterToProc	lambdalifting.html#liftIterToProc,ModuleGraph,PSym,PNode,PType	lambdalifting: liftIterToProc(g: ModuleGraph; fn: PSym; body: PNode; ptrType: PType): PNode	
liftLambdas	lambdalifting.html#liftLambdas,ModuleGraph,PSym,PNode,bool	lambdalifting: liftLambdas(g: ModuleGraph; fn: PSym; body: PNode; tooEarly: var bool): PNode	
liftLambdasForTopLevel	lambdalifting.html#liftLambdasForTopLevel,PSym,PNode	lambdalifting: liftLambdasForTopLevel(module: PSym; body: PNode): PNode	
liftForLoop	lambdalifting.html#liftForLoop,ModuleGraph,PNode,PSym	lambdalifting: liftForLoop(g: ModuleGraph; body: PNode; owner: PSym): PNode	
